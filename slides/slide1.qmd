---
title: "KI und Bias"
subtitle: "Wenn du es nicht einfach erkl채ren kannst, hast du es nicht gut genug verstanden"
author: "Thomas Camminady"
# institute: "Data Scientist & Algorithmenentwickler  \nWahoo Fitness LLC"
footer: <https://www.camminady.dev>
date: "2023-09-01"
format:
  revealjs:
    preview-links: true
    chalkboard:
      src: drawings.json
      boardmarker-width: 5
      buttons: true

---
## TL;DR die n채chsten 2 Stunden

![Bias Laundering, [@JanelleCShane](https://twitter.com/janellecshane/status/1405598023619649537?s=21&t=cxiVL75DvO8YNWano9a2kw)](biaslaundering.jpeg){width=300}


## Quiz

[Ist das KI?](https://directpoll.com/r?XDbzPBd3ixYqg8tMPoeAV7wc3BzeALtPCeIVuaub)

::: {.notes}
Admin Link: [https://directpoll.com/c?XDVhEtRpk95hLkmX6EwVi6RsXzSkMdC](https://directpoll.com/c?XDVhEtRpk95hLkmX6EwVi6RsXzSkMdC)
:::


## TOC (delete this slide later)
- Quiz: Glaubt ihr DAS ist KI/AI? (Ohne Erkl채rung)
- Duolingo: KI deutsch - deutsch
  - KI == Datenbasierter Algortihmus
- Was ist ein algorithmus, was ist AI Algorithmus


## Klassische Algorithmen


```{dot}
digraph R {
  { rank=same Eingabe Algorithmus Ausgabe }
  "Eingabe"[color="lightblue",style="filled"]
  "Algorithmus"[color="orange",style="filled",shape="box"]
  "Ausgabe"[color="lightgreen",style="filled"]

  "Eingabe"->"Algorithmus"->"Ausgabe"

}
```

## Klassische Algorithmen
```{dot}
digraph R {
  { rank=same "Eingabe" "Algorithmus" "Ausgabe" }
  "Eingabe"[color="lightblue",style="filled",label="[5,3,2,1,4]"]
  "Algorithmus"[color="orange",style="filled",shape="box",label="Sortieralgorithmus"]
  "Ausgabe"[color="lightgreen",style="filled",label="[1,2,3,4,5]"]
  "Eingabe"->"Algorithmus"->"Ausgabe"
}
```

## Klassische Algorithmen
```{dot}
digraph R {
  { rank=same "Eingabe" "Algorithmus" "Ausgabe" }
  "Eingabe"[color="lightblue",style="filled",label="Start & Ziel"]
  "Algorithmus"[color="orange",style="filled",shape="box",label="Navi"]
  "Ausgabe"[color="lightgreen",style="filled",label="Route"]
  "Eingabe"->"Algorithmus"->"Ausgabe"
}
```


## Klassische Algorithmen
```{dot}
digraph R {
  { rank=same "Eingabe" "Algorithmus" "Ausgabe" }
  "Eingabe"[color="lightblue",style="filled",label="Wetter heute"]
  "Algorithmus"[color="orange",style="filled",shape="box",label="Wettersimulation"]
  "Ausgabe"[color="lightgreen",style="filled",label="Vorhersage Wetter morgen"]
  "Eingabe"->"Algorithmus"->"Ausgabe"
}
```


## Und was ist dann KI?

![Randall Munroe, [https://xkcd.com/1838](https://xkcd.com/1838),  (CC BY-NC 2.5)](xkcd_machine_learning.png){height=500px}


## Und was ist dann KI?

KI = Datenbasierter Algorithmus

## Datenbasierte Algorithmen
```{dot}
digraph R {
  compound=true;
  { rank=same Eingabe Algorithmus Ausgabe }
  {rank = same Daten Trainingsalgorithmus}
  "Eingabe"[color="lightblue",style="filled"]
  "Algorithmus"[color="orange",style="filled",shape="box"]
  "Trainingsalgorithmus"[color="orange",style="filled",shape="box"]
  "Ausgabe"[color="lightgreen",style="filled"]
  "Daten"[color="plum1",style="filled"]
  Daten-> Trainingsalgorithmus -> Algorithmus
  subgraph cluster1{
  Eingabe -> Algorithmus -> Ausgabe
  }
}
```

## Datenbasierte Algorithmen
```{dot}
digraph R {
  compound=true;
  { rank=same Eingabe Algorithmus Ausgabe }
  {rank = same Daten Trainingsalgorithmus}
  "Eingabe"[color="lightblue",style="filled",label="Video von Autofahrt"]
  "Algorithmus"[color="orange",style="filled",shape="box",label="Autopilot"]
  "Trainingsalgorithmus"[color="orange",style="filled",shape="box"]
  "Ausgabe"[color="lightgreen",style="filled",label="Aktionen (bremsen, lenken, ...)"]
  "Daten"[color="plum1",style="filled",label="Videos von Autofahrten & Aktionen"]
  Daten-> Trainingsalgorithmus -> Algorithmus
  subgraph cluster1{
  Eingabe -> Algorithmus -> Ausgabe
  }
}
```

## Datenbasierte Algorithmen
```{dot}
digraph R {
  compound=true;
  { rank=same Eingabe Algorithmus Ausgabe }
  {rank = same Daten Trainingsalgorithmus}
  "Eingabe"[color="lightblue",style="filled",label="Prompt"]
  "Algorithmus"[color="orange",style="filled",shape="box",label="ChatGPT"]
  "Trainingsalgorithmus"[color="orange",style="filled",shape="box"]
  "Ausgabe"[color="lightgreen",style="filled",label="Antwort"]
  "Daten"[color="plum1",style="filled",label="Textkorpus"]
  Daten-> Trainingsalgorithmus -> Algorithmus
  subgraph cluster1{
  Eingabe -> Algorithmus -> Ausgabe
  }
}
```


## MORE STUFF

```{python}
from scienceforfuture2023.utils.logger import logger
import altair as alt
import polars as pl
import numpy as np
import json
from rich import print
from camminapy.plot import altair_theme

altair_theme()
path = "/Users/thomascamminady/Data/runalyze/30378-gdpr-backup/json/2023-03-06-16781065054778.json"
with open(path, "r") as f:
    data = json.load(f)
df = pl.from_dict(
    {
        key: value
        for key, value in data["stream"][0].items()
        if value != [] and key != "Pauses"
    }
)
alt.Chart(df).mark_line(color="red", strokeWidth=3).encode(
    x=alt.X("Duration:Q").title("Zeit [Sekunden]"),
    y=alt.Y("HeartRate:Q").title("Puls [BPM]"),
).properties(
    title=f"""Puls f체r den Lauf am {path.split("/")[-1].removesuffix(".json")[:10]}"""
)
```


## b

```{python}
from dataclasses import dataclass
import numpy as np
import numpy.typing as npt

alt.data_transformers.disable_max_rows()


@dataclass
class Params:
    n: int
    lower: float
    upper: float

    def get_bpm(self) -> npt.NDArray:
        # return np.random.rand(self.n) * (self.upper - self.lower) + self.lower
        return (self.upper - self.lower) / 3 * np.random.randn(self.n) + self.lower


def model(bpm: npt.NDArray, sigma: float = 0.5, mu: float = 0) -> npt.NDArray:
    extra = (bpm - 100) / 100
    return (sigma + extra) * 2 * np.random.randn(len(bpm)) + mu


men_bpm = Params(400_000, 120, 180).get_bpm()
men_bpm_error = model(men_bpm)

women_bpm = Params(100_000, 140, 200).get_bpm()
women_bpm_error = model(women_bpm)

df = pl.concat(
    [
        pl.DataFrame({"sex": "Mann", "bpm": men_bpm, "error": men_bpm_error}),
        pl.DataFrame({"sex": "Frau", "bpm": women_bpm, "error": women_bpm_error}),
    ]
)
alt.Chart(df.sample(n=5000, seed=1)).mark_point(
    filled=True, size=50, opacity=1, clip=True
).encode(
    x=alt.X("bpm:Q").scale(zero=False, domain=[60, 200]),
    y="error:Q",
    order=alt.Order("sex:N", sort="descending"),
    #   color=alt.Color("sex:N")
    #   .scale(domain=["Mann", "Frau"], range=["green", "purple"])
    #   .title("Biologisches Geschlecht"),
)
```

## c
```{python}
alt.Chart(df.sample(n=5000, seed=1)).mark_point(
    filled=True, size=50, opacity=1, clip=True
).encode(
    x=alt.X("bpm:Q").scale(zero=False, domain=[60, 200]),
    y="error:Q",
    order=alt.Order("sex:N", sort="descending"),
    color=alt.Color("sex:N")
    .scale(domain=["Mann", "Frau"], range=["green", "purple"])
    .title("Biologisches Geschlecht"),
)
```
