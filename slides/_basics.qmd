# Algorithmen

:::: {.columns}

::: {.column width="50%"}



:::

::: {.column width="50%"}

![Randall Munroe, [xkcd.com/1838](https://xkcd.com/1838),  (CC BY-NC 2.5)](slides/assets/fig/xkcd_upscaled.jpg){height=500px}

:::

::::

## Klassische Algorithmen

```{dot}
//| file: slides/assets/dot/simple_algorithm.dot
```

## Klassische Algorithmen

```{dot}
//| file: slides/assets/dot/sort.dot
```

## Klassische Algorithmen

```{dot}
//| file: slides/assets/dot/navi.dot
```

## Klassische Algorithmen

```{dot}
//| file: slides/assets/dot/wetter.dot
```

## Sortieralgorithmus

::: columns
::: {.column width="40%"}

```{dot}
//| fig-width: 3.5
//| file: slides/assets/dot/sort_tb.dot
```

:::

::: {.column width="60%"}

```{python}
# | echo: true
import random


def algorithmus(zahlen):
    while not ist_sortiert(zahlen):
        random.shuffle(zahlen)
    return zahlen


def ist_sortiert(zahlen):
    for i in range(len(zahlen) - 1):
        if zahlen[i] > zahlen[i + 1]:
            return False
    return True


algorithmus([5, 3, 2, 1, 4])
```

:::
:::
